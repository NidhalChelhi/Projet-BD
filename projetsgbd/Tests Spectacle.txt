-- 1. Test add_spectacle Procedure
-- Test Case 1: Add a valid spectacle
BEGIN
    pkg_spectacle.add_spectacle(
        p_titre => 'Symphonie Été',
        p_dateS => TO_DATE('2024-12-20', 'YYYY-MM-DD'),
        p_h_debut => 19.00,
        p_dureeS => 2.5,
        p_nbrSpectateur => 100,
        p_idLieu => 1
    );
END;
/

-- Test Case 2: Add a spectacle with invalid capacity
BEGIN
    pkg_spectacle.add_spectacle(
        p_titre => 'Grand Concert',
        p_dateS => TO_DATE('2024-12-25', 'YYYY-MM-DD'),
        p_h_debut => 20.00,
        p_dureeS => 3.0,
        p_nbrSpectateur => 1500,
        p_idLieu => 2
    );
END;
/

-- Test Case 3: Add a spectacle with a scheduling conflict
BEGIN
    pkg_spectacle.add_spectacle(
        p_titre => 'Spectacle Conflit',
        p_dateS => TO_DATE('2024-12-20', 'YYYY-MM-DD'),
        p_h_debut => 19.30,
        p_dureeS => 1.5,
        p_nbrSpectateur => 100,
        p_idLieu => 29
    );
END;
/

-- 2. Test cancel_spectacle Procedure
-- Cancel a scheduled spectacle
BEGIN
    pkg_spectacle.cancel_spectacle(
        p_idSpec => 1
    );
END;
/

-- Verification: Check if the spectacle's dateS is set to NULL
SELECT idSpec, Titre, dateS FROM Spectacle WHERE idSpec = 1;

-- 3. Test update_spectacle Procedure
-- Test Case 1: Update title and number of spectators (Update with invalid capacity)
BEGIN
    pkg_spectacle.update_spectacle(
        p_idSpec => 2,
        p_titre => 'Spectacle Modifié',
        p_nbrSpectateur => 350
    );
END;
/

-- Test Case 2: Update date, start time, and venue 
BEGIN
    pkg_spectacle.update_spectacle(
        p_idSpec => 2,
        p_dateS => TO_DATE('2024-12-26', 'YYYY-MM-DD'),
        p_h_debut => 21.00,
        p_idLieu => 3
    );
END;
/

-- Verification: Query the updated spectacle
SELECT * FROM Spectacle WHERE idSpec = 2;



-- 4. Test search_spectacle Function
-- Test Case 1: Search by title
VARIABLE v_cursor REFCURSOR;
BEGIN
    :v_cursor := pkg_spectacle.search_spectacle(
        p_titre => 'Symphonie'
    );
END;
/
PRINT v_cursor;

-- Test Case 2: Search by ID
VARIABLE v_cursor REFCURSOR;
BEGIN
    :v_cursor := pkg_spectacle.search_spectacle(
        p_idSpec => 1
    );
END;
/
PRINT v_cursor;

-- Test Case 3: Search by both title and ID
VARIABLE v_cursor REFCURSOR;
BEGIN
    :v_cursor := pkg_spectacle.search_spectacle(
        p_titre => 'Spectacle',
        p_idSpec => 2
    );
END;
/
PRINT v_cursor;

-- Verification Queries
-- 1. List all spectacles
SELECT * FROM Spectacle;

-- 2. Check cancelled spectacles
SELECT idSpec, Titre, dateS FROM Spectacle WHERE dateS IS NULL;

-- 3. Check modified spectacles
SELECT * FROM Spectacle WHERE idSpec = 2;
